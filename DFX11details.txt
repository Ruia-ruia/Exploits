I have found an integer overflow and a double free vulnerability in the way LibX11 handles locales. 
The integer overflow is a necessary precursor to the double free. 

The integer overflow occurs in this for loop, as length can be incremented to a negative value with sufficiently large font set names. 
https://gitlab.freedesktop.org/xorg/lib/libx11/-/blob/master/modules/om/generic/omGeneric.c#L2010

Because length is a signed int, it wraps, which then causes the call to malloc() to fail here: 
https://gitlab.freedesktop.org/xorg/lib/libx11/-/blob/master/modules/om/generic/omGeneric.c#L2025

Which leads to Xfree(required_list)
https://gitlab.freedesktop.org/xorg/lib/libx11/-/blob/master/modules/om/generic/omGeneric.c#L2027 

Note that required_list and om->core.required_charset.charset_list are equivalent. 
 https://gitlab.freedesktop.org/xorg/lib/libx11/-/blob/master/modules/om/generic/omGeneric.c#L2018

Now because init_om returned false, we "goto err" here: 
https://gitlab.freedesktop.org/xorg/lib/libx11/-/blob/master/modules/om/generic/omGeneric.c#L2071

Then in close_om() we call Xfree for a second time on the same region of memory: 
https://gitlab.freedesktop.org/xorg/lib/libx11/-/blob/master/modules/om/generic/omGeneric.c#L1678

So now the same object is freed twice, once as required_list, and a second time as om->core.required_charset.charset_list. 

To generate the locale here is a small shell script (which requires plenty of RAM and a bit of patience, 
so don't run it unless you absolutely need to verify the realisability of the vulnerability). 
https://github.com/Ruia-ruia/Exploits/blob/master/x11doublefree.sh
The PoC generates enough fontsets, with large enough names, to increment the length variable in init_om to a negative value. 
I have tested on Ubuntu 20.04, with Glibc 2.31 installed. 
To trigger the vulnerability, simply run the script and call XOpenOM() in your own application. 
